import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from app import keyboard as kb
from app.database.Models.transfer import get_transfer_by_order_id, update_transfer  # –¥–æ–ø—É—Å—Ç–∏–º, —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
from app.utils.getRouteButton import get_routes_keyboard_from_point_a, get_points_a_keyboard


class EditTransferFSM(StatesGroup):
    count = State()
    price = State()
    vehicle_type = State()
    driver_included = State()
    route_id = State()


def register_edit_transfer_handlers(dp):
    @dp.callback_query_handler(lambda c: c.data.startswith("change_transfer_"))
    async def start_edit_transfer(callback: types.CallbackQuery, state: FSMContext):
        order_id = int(callback.data.split("_")[2])
        transfer = await get_transfer_by_order_id(order_id)
        if not transfer:
            await callback.message.answer('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä.', reply_markup=kb.main)
            return

        async with state.proxy() as data:
            data['order_id'] = order_id
            data['transfer_id'] = transfer[0]
            data['persons_count'] = transfer[4]
            data['price'] = transfer[6]
            data['vehicle_type'] = transfer[2]
            data['driver_included'] = transfer[5]
            data['route_id'] = transfer[3]

        await callback.message.edit_text(
            text=f"üî¢ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {transfer[4]}\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ:",
            reply_markup=kb.close2,
            parse_mode='HTML'
        )
        await EditTransferFSM.count.set()

    @dp.message_handler(state=EditTransferFSM.count)
    async def edit_count(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()

        if user_input == '–æ—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
            await state.finish()
            return

        if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é, –Ω–µ –º–µ–Ω—è—è persons_count
            await message.answer('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
                                 reply_markup=kb.close_replay_callback)
            await EditTransferFSM.price.set()
            return

        if not user_input.isdigit():
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
            return

        async with state.proxy() as data:
            data['persons_count'] = int(user_input)

        await message.answer('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":', reply_markup=kb.close_replay_callback)
        await EditTransferFSM.price.set()

    @dp.message_handler(state=EditTransferFSM.price)
    async def edit_price(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()

        if user_input == '–æ—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
            await state.finish()
            return

        if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await message.answer('üöó –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":', reply_markup=kb.close_replay_callback)
            await EditTransferFSM.vehicle_type.set()
            return

        if not re.match(r'^\d+(\.\d{1,2})?$', message.text.strip()):
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
            return

        async with state.proxy() as data:
            data['price'] = float(message.text.strip())

        await message.answer('üöó –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":', reply_markup=kb.close_replay_callback)
        await EditTransferFSM.vehicle_type.set()

    @dp.message_handler(state=EditTransferFSM.vehicle_type)
    async def edit_vehicle_type(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()

        if user_input == '–æ—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
            await state.finish()
            return

        if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await message.answer('üë®‚Äç‚úàÔ∏è –í–∫–ª—é—á—ë–Ω –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å? (–¥–∞ / –Ω–µ—Ç) –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":', reply_markup=kb.yes_no_kb)
            await EditTransferFSM.driver_included.set()
            return

        async with state.proxy() as data:
            data['vehicle_type'] = message.text.strip()

        await message.answer('üë®‚Äç‚úàÔ∏è –í–∫–ª—é—á—ë–Ω –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å? (–¥–∞ / –Ω–µ—Ç) –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":', reply_markup=kb.yes_no_kb)
        await EditTransferFSM.driver_included.set()

    @dp.message_handler(state=EditTransferFSM.driver_included)
    async def edit_driver_included(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()

        if user_input == '–æ—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
            await state.finish()
            return

        if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await message.answer('üó∫ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
                                 reply_markup=await get_points_a_keyboard())
            await EditTransferFSM.route_id.set()
            return

        if user_input not in ['–¥–∞', '–Ω–µ—Ç']:
            await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", reply_markup=kb.yes_no_kb)
            return

        async with state.proxy() as data:
            data['driver_included'] = (user_input == '–¥–∞')

        await message.answer('üó∫ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=get_points_a_keyboard())
        await EditTransferFSM.route_id.set()

    @dp.callback_query_handler(lambda c: c.data.startswith('select_point_a_'), state=EditTransferFSM.route_id)
    async def handle_point_a_selected(callback: types.CallbackQuery, state: FSMContext):
        point_a = callback.data.replace('select_point_a_', '')
        async with state.proxy() as data:
            data['point_a'] = point_a

        await callback.message.edit_text(
            text=f"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É –ê: {point_a}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ë:",
            reply_markup=get_routes_keyboard_from_point_a(point_a)
        )

    @dp.callback_query_handler(lambda c: c.data.startswith('select_route_'), state=EditTransferFSM.route_id)
    async def route_selected(callback: types.CallbackQuery, state: FSMContext):
        try:
            route_id = int(callback.data.replace('select_route_', ''))
        except ValueError:
            return

        async with state.proxy() as data:
            data['route_id'] = route_id
            # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
            await update_transfer(
                order_id=data['order_id'],
                transfer_id=data['transfer_id'],
                vehicle_type=data['vehicle_type'],
                route_id=data['route_id'],
                persons_count=data['persons_count'],
                driver_included=data['driver_included'],
                price=data['price']
            )

        info_text = await kb.info_transfer_text(
            order_id=data['order_id'],
            quantity=data['persons_count'],
            price=data['price'],
            vehicle_type=data['vehicle_type'],
            driver_included=data['driver_included'],
            route_id=data['route_id'],
            transfer_id=data['transfer_id']
        )

        buttons = await kb.service_buttons(data['order_id'])

        await callback.message.answer(
            f'‚úÖ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n{info_text}',
            reply_markup=buttons,
            parse_mode='HTML',
            disable_web_page_preview=True
        )

        await state.finish()
