import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from app import keyboard as kb
from app.database.Models.order import get_order_by_id
from app.database.Models.transfer import add_transfer
from app.utils.getRouteButton import get_points_a_keyboard, get_routes_keyboard_from_point_a


class AddTransferFSM(StatesGroup):
    get_order_id = State()
    count = State()
    price = State()
    vehicle_type = State()
    driver_included = State()
    route_id = State()



def register_add_transfer_handlers(dp):
    @dp.callback_query_handler(lambda c: c.data.startswith("add_transfer_"))
    async def add_supboard_handler(callback: types.CallbackQuery, state: FSMContext):
        order_id = int(callback.data.split("_")[2])
        order = await get_order_by_id(order_id)

        if not order:
            await callback.message.answer('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.', reply_markup=kb.main)
            return

        async with state.proxy() as data:
            data['order_id'] = order_id
            data['date_start'] = order[1]
            data['date_end'] = order[3]

        await callback.message.edit_text(
            f'üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤',
            reply_markup=kb.close2,
            parse_mode='HTML'
        )
        await AddTransferFSM.count.set()

    @dp.message_handler(state=AddTransferFSM.count)
    async def save_supboard_quantity(message: types.Message, state: FSMContext):
        if not message.text.isdigit():
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        transfer_count = int(message.text)
        async with state.proxy() as data:
            data['persons_count'] = transfer_count

        await message.answer('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞:', reply_markup=kb.close2)
        await AddTransferFSM.price.set()

    @dp.message_handler(state=AddTransferFSM.price)
    async def save_transfer_price(message: types.Message, state: FSMContext):
        if not re.match(r'^\d+(\.\d{1,2})?$', message.text.strip()):
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50)")
            return

        async with state.proxy() as data:
            data['price'] = float(message.text.strip())

        await message.answer("üöó –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=kb.close2)
        await AddTransferFSM.vehicle_type.set()

    @dp.message_handler(state=AddTransferFSM.vehicle_type)
    async def save_vehicle_type(message: types.Message, state: FSMContext):
        vehicle_type = message.text.strip()
        async with state.proxy() as data:
            data['vehicle_type'] = vehicle_type

        await message.answer(
            "üë®‚Äç‚úàÔ∏è –í–∫–ª—é—á—ë–Ω –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å? (–¥–∞ / –Ω–µ—Ç):",
            reply_markup=kb.yes_no_kb
        )
        await AddTransferFSM.driver_included.set()

    @dp.message_handler(state=AddTransferFSM.driver_included)
    async def save_driver_included(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()
        if user_input not in ['–¥–∞', '–Ω–µ—Ç']:
            await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'", reply_markup=kb.yes_no_kb)
            return

        async with state.proxy() as data:
            data['driver_included'] = user_input == '–¥–∞'

        await message.answer(
            'üó∫ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:',
            reply_markup=get_points_a_keyboard()
        )
        await AddTransferFSM.route_id.set()

    @dp.callback_query_handler(lambda c: c.data.startswith('select_point_a_'), state=AddTransferFSM.route_id)
    async def handle_point_a_selected(callback: types.CallbackQuery, state: FSMContext):
        point_a = callback.data.replace('select_point_a_', '')
        async with state.proxy() as data:
            data['point_a'] = point_a

        await callback.message.edit_text(
            text=f"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É –ê: {point_a}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ë:",
            reply_markup=get_routes_keyboard_from_point_a(point_a)
        )

    @dp.callback_query_handler(lambda c: c.data.startswith('select_point_a_'), state=AddTransferFSM.route_id)
    async def handle_point_a_selected(callback: types.CallbackQuery, state: FSMContext):
        point_a = callback.data.replace('select_point_a_', '')
        async with state.proxy() as data:
            data['point_a'] = point_a

        await callback.message.edit_text(
            text=f"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É –ê: {point_a}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ë:",
            reply_markup=await get_routes_keyboard_from_point_a(point_a)
        )

    @dp.callback_query_handler(lambda c: c.data.startswith('select_route_'), state=AddTransferFSM.route_id)
    async def route_selected(callback: types.CallbackQuery, state: FSMContext):
        try:
            route_id = int(callback.data.replace('select_route_', ''))
        except ValueError:
            return

        async with state.proxy() as data:
            data['route_id'] = route_id

            transfer_id = await add_transfer(
                order_id=data['order_id'],
                vehicle_type=data['vehicle_type'],
                route_id=data['route_id'],
                persons_count=data['persons_count'],
                driver_included=data['driver_included'],
                price=data['price']
            )

        info_text = await kb.info_transfer_text(
            order_id=data['order_id'],
            quantity=data['persons_count'],
            price=data['price'],
            vehicle_type=data['vehicle_type'],
            driver_included=data['driver_included'],
            route_id=data['route_id'],
            transfer_id=transfer_id
        )

        buttons = await kb.service_buttons(data['order_id'])

        await callback.message.answer(
            f'‚úÖ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n{info_text}',
            reply_markup=buttons,
            parse_mode='HTML',
            disable_web_page_preview=True
        )

        await state.finish()