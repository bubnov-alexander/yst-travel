from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import datetime as dt

from app.database.Models import catamaran
from app import keyboard as kb
from config import CHAT_ID
from app.utils.logger import logger


class MyFSM(StatesGroup):
    add_date_start = State()
    add_date_end = State()
    add_quantity = State()
    add_time_start = State()
    add_route = State()
    add_customer_name = State()
    add_phone_number = State()
    add_price = State()
    add_additional_wishes = State()


def register_add_catamaran_handlers(dp, bot):
    @dp.callback_query_handler(text='add_order')
    async def add_order(callback: types.CallbackQuery):
        await MyFSM.add_date_start.set()
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text='üü¢ –ù–∞–ø–∏—à–∏ "–î–∞—Ç—É –ø—Ä–∏–µ–∑–¥–∞"',
            reply_markup=kb.close2
        )

    @dp.message_handler(state=MyFSM.add_date_start)
    async def save_date_start(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            try:
                try:
                    data['date_start'] = dt.datetime.strptime(message.text, '%d.%m.%y').strftime('%d.%m.%Y')
                except:
                    data['date_start'] = dt.datetime.strptime(message.text, '%d.%m.%Y').strftime('%d.%m.%Y')
                await message.answer('üî¥ –ù–∞–ø–∏—à–∏ "–î–∞—Ç—É –≤—ã–µ–∑–¥–∞"', reply_markup=kb.close2)
                await MyFSM.next()
            except:
                await message.answer('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì', reply_markup=kb.close2)

    @dp.message_handler(state=MyFSM.add_date_end)
    async def save_date_end(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            try:
                try:
                    data['date_end'] = dt.datetime.strptime(message.text, '%d.%m.%y').strftime('%d.%m.%Y')
                except:
                    data['date_end'] = dt.datetime.strptime(message.text, '%d.%m.%Y').strftime('%d.%m.%Y')
                check = await catamaran.check_availability(data['date_start'], data['date_end'], 1)
                if check[0]:
                    await message.answer(f'üìà –ù–∞–ø–∏—à–∏ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤" –°–≤–æ–±–æ–¥–Ω–æ: {check[1]}', reply_markup=kb.close2)
                    await MyFSM.next()
                else:
                    await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã. –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: 0', reply_markup=kb.main)
                    await state.finish()
            except:
                await message.answer('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì', reply_markup=kb.close2)

    @dp.message_handler(state=MyFSM.add_quantity)
    async def save_quantity(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['quantity'] = message.text
            check = await catamaran.check_availability(data['date_start'], data['date_end'], int(data['quantity']))
            if check[0]:
                await message.answer('‚è∞Ô∏è –ù–∞–ø–∏—à–∏ "–í—Ä–µ–º—è –ø—Ä–∏–µ–∑–¥–∞"', reply_markup=kb.close2)
                await MyFSM.next()
            else:
                await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤. –°–≤–æ–±–æ–¥–Ω–æ: {check[1]}', reply_markup=kb.main)
                await state.finish()

    @dp.message_handler(state=MyFSM.add_time_start)
    async def save_time_start(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['time_start'] = message.text
        await message.answer('üó∫ –ù–∞–ø–∏—à–∏ "–ú–∞—Ä—à—Ä—É—Ç"', reply_markup=kb.close2)
        await MyFSM.next()

    @dp.message_handler(state=MyFSM.add_route)
    async def save_route(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['route'] = message.text
        await message.answer('üë§ –ù–∞–ø–∏—à–∏ "–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞"', reply_markup=kb.close2)
        await MyFSM.next()

    @dp.message_handler(state=MyFSM.add_customer_name)
    async def save_customer_name(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['customer_name'] = message.text
        await message.answer('üìû –ù–∞–ø–∏—à–∏ "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞"', reply_markup=kb.close2)
        await MyFSM.next()

    @dp.message_handler(state=MyFSM.add_phone_number)
    async def save_phone_number(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['phone_number'] = message.text
        await message.answer('üíµ –ù–∞–ø–∏—à–∏ "–¶–µ–Ω—É –∑–∞–∫–∞–∑–∞"', reply_markup=kb.close2)
        await MyFSM.next()

    @dp.message_handler(state=MyFSM.add_price)
    async def save_price(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['price'] = message.text
        await message.answer('üìù –ù–∞–ø–∏—à–∏ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"', reply_markup=kb.close3)
        await MyFSM.next()

    @dp.message_handler(state=MyFSM.add_additional_wishes)
    async def save_additional_wishes(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['additional_wishes'] = '' if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else message.text
            booking_successful = catamaran.add_booking(
                data['date_start'], data['date_end'], data['time_start'], data['route'],
                data['quantity'], data['customer_name'], data['phone_number'],
                data['price'], data['additional_wishes']
            )
            info_text = await kb.info_text(
                booking_successful, data['date_start'], data['date_end'], data['time_start'],
                data['route'], data['quantity'], data['customer_name'], data['phone_number'],
                data['price'], data['additional_wishes'], status=0
            )
            if booking_successful:
                await message.answer('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.', reply_markup=kb.main)
                try:
                    await message.bot.send_message(chat_id=CHAT_ID, text=f"–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {info_text}")
                except:
                    logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç')
            else:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã.', reply_markup=kb.main)
        await state.finish()
