from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import re
import datetime as dt

from app.database.Models import catamaran
from app import keyboard as kb
from app.database.Models.catamaran import get_order_by_id
from app.database.Models.route import get_route_by_id
from app.utils.getRouteButton import get_points_a_keyboard, get_routes_keyboard_from_point_a
from app.utils.logger import logger


class EditOrderFSM(StatesGroup):
    edit_order = State()
    edit_date_arrival = State()
    edit_time_arrival = State()
    edit_date_departure = State()
    edit_time_departure = State()
    edit_quantity = State()
    edit_route = State()
    edit_customer_name = State()
    edit_phone = State()
    edit_price = State()
    edit_additional_wishes = State()

def register_edit_catamaran_handlers(dp, bot):
    @dp.callback_query_handler(text='edit_order')
    async def edit_order(callback: types.CallbackQuery):
        await EditOrderFSM.edit_order.set()
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text='–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
            reply_markup=kb.close2
        )

    @dp.message_handler(state=EditOrderFSM.edit_order)
    async def edit_order_by_id(message: types.Message, state: FSMContext):
        order_id = message.text.strip()

        if not order_id.isdigit():
            await message.answer("‚ùå ID –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=kb.main)
            await state.finish()
            return

        order = await catamaran.get_order_by_id(int(order_id))

        if order:
            await EditOrderFSM.edit_date_arrival.set()
            await state.update_data(order_id=order_id)

            async with state.proxy() as data:
                data['order_id'] = order_id
                data['date_arrival'] = order[1]
                data['time_arrival'] = order[2]
                data['date_departure'] = order[3]
                data['time_departure'] = order[4]
                data['route_id'] = order[5]
                data['quantity'] = order[6]
                data['customer_name'] = order[7]
                data['phone'] = order[8]
                data['price'] = order[9]
                data['additional_wishes'] = order[10]
                data['prepayment_status'] = order[11]

            route = get_route_by_id(order[5])
            route_name = route['name'] if route else '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

            text = await kb.info_text(
                order_id=order[0],
                date_arrival=order[1],
                time_arrival=order[2],
                date_departure=order[3],
                time_departure=order[4],
                route_id=route_name,
                quantity=order[6],
                customer_name=order[7],
                phone_link=order[8],
                price=order[9],
                additional_wishes=order[10],
                status=order[11]
            )

            await bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=kb.close3,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            await bot.send_message(
                chat_id=message.chat.id,
                text='üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.07.2024):',
                reply_markup=kb.close3,
                parse_mode='HTML'
            )
        else:
            await message.answer(f'‚ùå –ó–∞–∫–∞–∑ —Å ID <b>{order_id}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=kb.main, parse_mode='HTML')
            await state.finish()

    @dp.message_handler(state=EditOrderFSM.edit_date_arrival)
    async def save_edit_date_arrival(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()

        if user_input == '–æ—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
            await state.finish()
            return

        if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await message.answer('üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.07.2024)', reply_markup=kb.close3)
            await EditOrderFSM.edit_date_departure.set()
            return

        try:
            try:
                parsed_date = dt.datetime.strptime(message.text, '%d.%m.%y')
            except ValueError:
                parsed_date = dt.datetime.strptime(message.text, '%d.%m.%Y')

            formatted_date = parsed_date.strftime('%d.%m.%Y')

            async with state.proxy() as data:
                data['date_arrival'] = formatted_date

            await message.answer('üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.07.2024)', reply_markup=kb.close3)
            await EditOrderFSM.edit_date_departure.set()

        except ValueError:
            await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì',
                                 reply_markup=kb.close3)

    @dp.message_handler(state=EditOrderFSM.edit_date_departure)
    async def save_edit_date_departure(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()

        if user_input == '–æ—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
            await state.finish()
            return

        if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await message.answer('üìà –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤:', reply_markup=kb.close3)
            await EditOrderFSM.edit_quantity.set()
            return

        async with state.proxy() as data:
            try:
                try:
                    parsed_date = dt.datetime.strptime(message.text, '%d.%m.%y')
                except ValueError:
                    parsed_date = dt.datetime.strptime(message.text, '%d.%m.%Y')

                formatted_date = parsed_date.strftime('%d.%m.%Y')
                data['date_departure'] = formatted_date

                check = await catamaran.check_availability(
                    data['date_arrival'],
                    data['date_departure'],
                    1,
                    data['order_id']
                )

                if check[0]:
                    await message.answer(
                        f'üìà –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤\n–°–≤–æ–±–æ–¥–Ω–æ: {check[1]}',
                        reply_markup=kb.close3
                    )
                    await EditOrderFSM.edit_quantity.set()
                else:
                    await message.answer(
                        f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.\n–°–≤–æ–±–æ–¥–Ω–æ: {check[1]}',
                        reply_markup=kb.main
                    )
                    await state.finish()

            except ValueError:
                await message.answer(
                    '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì',
                    reply_markup=kb.close3
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ save_edit_date_departure: {e}")
                await message.answer(
                    '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    reply_markup=kb.main
                )
                await state.finish()

    @dp.message_handler(state=EditOrderFSM.edit_quantity)
    async def save_edit_quantity(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()

        if user_input == '–æ—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
            await state.finish()
            return

        if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await message.answer('‚è∞ –ù–∞–ø–∏—à–∏—Ç–µ <b>–≤—Ä–µ–º—è –ø—Ä–∏–µ–∑–¥–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)', reply_markup=kb.close3,
                                 parse_mode='HTML')
            await EditOrderFSM.edit_time_arrival.set()
            return

        async with state.proxy() as data:
            try:
                quantity = int(message.text)
                if quantity <= 0:
                    await message.answer('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', reply_markup=kb.close3)
                    return

                data['quantity'] = quantity

                check = await catamaran.check_availability(
                    data['date_arrival'],
                    data['date_departure'],
                    quantity,
                    data['order_id']
                )

                if check[0]:
                    await message.answer('‚è∞ –ù–∞–ø–∏—à–∏—Ç–µ <b>–≤—Ä–µ–º—è –ø—Ä–∏–µ–∑–¥–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)', reply_markup=kb.close3,
                                         parse_mode='HTML')
                    await EditOrderFSM.edit_time_arrival.set()
                else:
                    await message.answer(
                        f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.\n–°–≤–æ–±–æ–¥–Ω–æ: {check[1]}',
                        reply_markup=kb.main
                    )
                    await state.finish()

            except ValueError:
                await message.answer(
                    '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2)',
                    reply_markup=kb.close3
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ save_edit_quantity: {e}")
                await message.answer(
                    '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞',
                    reply_markup=kb.main
                )
                await state.finish()

    @dp.message_handler(state=EditOrderFSM.edit_time_arrival)
    async def save_edit_time_start(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()

        if user_input == '–æ—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
            await state.finish()
            return

        if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await message.answer('‚è∞ –ù–∞–ø–∏—à–∏—Ç–µ <b>–≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)', reply_markup=kb.close3,
                                 parse_mode='HTML')
            await EditOrderFSM.edit_time_departure.set()
            return

        if not re.match(r'^\d{2}:\d{2}$', message.text.strip()):
            await message.answer('‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 16:00', reply_markup=kb.close3)
            return

        async with state.proxy() as data:
            data['time_arrival'] = message.text.strip()

        await message.answer('‚è∞ –ù–∞–ø–∏—à–∏—Ç–µ <b>–≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)', reply_markup=kb.close3,
                             parse_mode='HTML')
        await EditOrderFSM.edit_time_departure.set()

    @dp.message_handler(state=EditOrderFSM.edit_time_departure)
    async def save_edit_time_end(message: types.Message, state: FSMContext):
        user_input = message.text.strip().lower()

        if user_input == '–æ—Ç–º–µ–Ω–∏—Ç—å':
            await message.answer('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
            await state.finish()
            return

        if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await message.answer('üó∫ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:',
                                 reply_markup=get_points_a_keyboard())
            await EditOrderFSM.edit_route.set()
            return

        if not re.match(r'^\d{2}:\d{2}$', message.text.strip()):
            await message.answer('‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 16:00', reply_markup=kb.close3)
            return

        async with state.proxy() as data:
            data['time_departure'] = message.text.strip()

        await message.answer('üó∫ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:', reply_markup=get_points_a_keyboard())
        await EditOrderFSM.edit_route.set()

    @dp.callback_query_handler(lambda c: c.data.startswith('select_point_a_'), state=EditOrderFSM.edit_route)
    async def handle_point_a_selected(callback: types.CallbackQuery, state: FSMContext):
        point_a = callback.data.replace('select_point_a_', '')
        async with state.proxy() as data:
            data['point_a'] = point_a

        await callback.message.edit_text(
            f"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É –ê: {point_a}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ë:",
            reply_markup=get_routes_keyboard_from_point_a(point_a)
        )

    @dp.callback_query_handler(lambda c: c.data.startswith('select_route_'), state=EditOrderFSM.edit_route)
    async def handle_route_selected(callback: types.CallbackQuery, state: FSMContext):
        route_id = int(callback.data.replace('select_route_', ''))
        async with state.proxy() as data:
            data['route_id'] = route_id

        await callback.message.edit_text("üë§ –ù–∞–ø–∏—à–∏ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞")
        await callback.answer()
        await EditOrderFSM.edit_customer_name.set()

    @dp.message_handler(state=EditOrderFSM.edit_route)
    async def edit_route(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            if message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
                await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.main)
                await state.finish()
                return
            elif message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                await message.answer('üë§ –ù–∞–ø–∏—à–∏ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞', reply_markup=kb.close3)
                await EditOrderFSM.edit_customer_name.set()
                return
            else:
                data['route'] = message.text

        await message.answer('üë§ –ù–∞–ø–∏—à–∏ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞', reply_markup=kb.close3)
        await EditOrderFSM.edit_customer_name.set()

    @dp.message_handler(state=EditOrderFSM.edit_customer_name)
    async def edit_customer_name(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            if message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
                await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.main)
                await state.finish()
                return
            elif message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                await message.answer('üìû –ù–∞–ø–∏—à–∏ "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞"', reply_markup=kb.close3)
                await EditOrderFSM.edit_phone.set()
                return
            else:
                data['customer_name'] = message.text
        await message.answer('üìû –ù–∞–ø–∏—à–∏ "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞"', reply_markup=kb.close3)
        await EditOrderFSM.edit_phone.set()

    @dp.message_handler(state=EditOrderFSM.edit_phone)
    async def edit_phone_number(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            try:
                if message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
                    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.main)
                    await state.finish()
                    return
                elif message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                    await message.answer('üíµ –ù–∞–ø–∏—à–∏ "–¶–µ–Ω—É –∑–∞–∫–∞–∑–∞"', reply_markup=kb.close3)
                    await EditOrderFSM.edit_price.set()
                    return
                else:
                    phone = re.sub(r'[^0-9]', '', message.text)

                    if len(phone) == 10:
                        whatsapp_link = f"https://wa.me/7{phone}"
                    elif len(phone) == 11 and phone[0] in ('7', '8'):
                        whatsapp_link = f"https://wa.me/7{phone[1:]}"
                    else:
                        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ 10 –∏–ª–∏ 11 —Ü–∏—Ñ—Ä', reply_markup=kb.close3)
                        return

                    data['phone'] = whatsapp_link
                    await message.answer('üíµ –ù–∞–ø–∏—à–∏ "–¶–µ–Ω—É –∑–∞–∫–∞–∑–∞"', reply_markup=kb.close3)
                    await EditOrderFSM.edit_price.set()

            except Exception as e:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=kb.close3)
                logger.error(f"Phone processing error (edit): {e}")

    @dp.message_handler(state=EditOrderFSM.edit_price)
    async def edit_price(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            if message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
                await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.main)
                await state.finish()
                return
            elif message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                await message.answer('üìù –ù–∞–ø–∏—à–∏ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"', reply_markup=kb.close3)
                await EditOrderFSM.edit_additional_wishes.set()
                return
            else:
                data['price'] = message.text
        await message.answer('üìù –ù–∞–ø–∏—à–∏ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"', reply_markup=kb.close3)
        await EditOrderFSM.edit_additional_wishes.set()

    @dp.message_handler(state=EditOrderFSM.edit_additional_wishes)
    async def edit_additional_wishes(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            if message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
                await message.answer('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.main)
                await state.finish()
                return

            if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                data['additional_wishes'] = message.text
            else:
                data['additional_wishes'] = data.get('additional_wishes', '')

            try:
                order_id = data['order_id']
                text = await kb.info_text(
                    order_id=order_id,
                    date_arrival=data['date_arrival'],
                    date_departure=data['date_departure'],
                    time_arrival=data['time_arrival'],
                    time_departure=data['time_departure'],
                    route_id=data['route_id'],
                    quantity=data['quantity'],
                    customer_name=data['customer_name'],
                    phone_link=data['phone'],
                    price=data['price'],
                    additional_wishes=data['additional_wishes'],
                    status=data['prepayment_status']
                )

                await catamaran.edit_order(
                    date_arrival=data['date_arrival'],
                    date_departure=data['date_departure'],
                    time_arrival=data['time_arrival'],
                    time_departure=data['time_departure'],
                    route_id=data['route_id'],
                    quantity=data['quantity'],
                    customer_name=data['customer_name'],
                    phone=data['phone'],
                    price=data['price'],
                    additional_wishes=data['additional_wishes'],
                    prepayment_status=data['prepayment_status'],
                    order_id=order_id,
                )

                await message.answer(
                    text=f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. \n\n {text}",
                    reply_markup=kb.main,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )

            except Exception as e:
                await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.', reply_markup=kb.main)
                logger.error(f'–û—à–∏–±–∫–∞ –≤ edit_additional_wishes: {e}')

            await state.finish()