from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from app import keyboard
from app.database.Models.user import set_user, delete_user


class AdminFSM(StatesGroup):
    waiting_for_user_id_to_add = State()
    waiting_for_user_id_to_remove = State()


def register_handle_add_admin(dp):
    @dp.callback_query_handler(lambda c: c.data == "add_admin")
    async def handle_add_admin(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            text="üîπ –û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ.",
            reply_markup=keyboard.close2
        )
        await AdminFSM.waiting_for_user_id_to_add.set()

    @dp.message_handler(state=AdminFSM.waiting_for_user_id_to_add, content_types=types.ContentTypes.ANY)
    async def process_add_admin(message: types.Message, state: FSMContext):
        if message.forward_from:
            user_id = message.forward_from.id
            username = message.forward_from.username

        else:
            try:
                user_id = int(message.text.strip())
                username = None
            except ValueError:
                await message.reply(
                    text=(
                        "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–ø—Ä–µ—Ç–∏–ª –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞."
                        "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ Telegram ID –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É."
                    ),
                    reply_markup=keyboard.close2
                )
                return

        set_user(
            user_id=user_id
        )

        await message.reply(
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.",
            reply_markup=keyboard.main
        )
        await state.finish()


def register_handle_delete_admin(dp):
    @dp.callback_query_handler(lambda c: c.data == "remove_admin")
    async def handle_remove_admin(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            text="üî∏ –í–≤–µ–¥–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.",
            reply_markup=keyboard.close2
        )
        await AdminFSM.waiting_for_user_id_to_remove.set()

    @dp.message_handler(state=AdminFSM.waiting_for_user_id_to_remove)
    async def process_remove_admin(message: types.Message, state: FSMContext):
        try:
            user_id = int(message.text.strip())
        except ValueError:
            await message.reply(
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                reply_markup=keyboard.close2
            )
            return

        changes = delete_user(
            user_id=user_id,
        )

        if changes:
            await message.reply(
                text=f"üóë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {user_id} —É–¥–∞–ª—ë–Ω.",
                reply_markup=keyboard.main
            )
            await state.finish()
        else:
            await message.reply("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
