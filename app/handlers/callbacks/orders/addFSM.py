from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import re
import datetime as dt

from app.database.Models import catamaran
from app import keyboard as kb
from app.database.Models.order import check_availability, add_new_order
from app.utils.getRouteButton import get_points_a_keyboard, get_routes_keyboard_from_point_a
from config import CHAT_ID
from app.utils.logger import logger


class MyFSM(StatesGroup):
    add_date_start = State()
    add_date_end = State()
    add_quantity = State()
    add_time_start = State()
    add_time_end = State()
    add_route = State()
    add_customer_name = State()
    add_phone_number = State()
    add_additional_wishes = State()
    add_prepayment_status = State()


def register_add_order_handlers(dp, bot):
    @dp.callback_query_handler(text='add_order')
    async def add_order(callback: types.CallbackQuery):
        await MyFSM.add_date_start.set()
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text='üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.07.2024)',
            reply_markup=kb.close2
        )

    @dp.message_handler(state=MyFSM.add_date_start)
    async def save_date_start(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            try:
                try:
                    data['date_start'] = dt.datetime.strptime(message.text, '%d.%m.%y').strftime('%d.%m.%Y')
                except ValueError:
                    data['date_start'] = dt.datetime.strptime(message.text, '%d.%m.%Y').strftime('%d.%m.%Y')

                await message.answer('üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.07.2024)', reply_markup=kb.close2)
                await MyFSM.next()

            except ValueError:
                await message.answer('‚ùå –î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì',
                                     reply_markup=kb.close2)

    @dp.message_handler(state=MyFSM.add_date_end)
    async def save_date_end(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                try:
                    data['date_end'] = dt.datetime.strptime(message.text, '%d.%m.%y').strftime('%d.%m.%Y')
                except ValueError:
                    data['date_end'] = dt.datetime.strptime(message.text, '%d.%m.%Y').strftime('%d.%m.%Y')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤ (—Å –Ω—É–ª—è–º–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏)
                check = await check_availability(
                    data['date_start'],
                    data['date_end'],
                    {
                        'catamarans': 0,
                        'supboards': 0,
                        'transfers': 0
                    }
                )

                if check[0]:
                    remaining = check[1]

                    await message.answer(
                        f'‚úÖ –î–∞—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã\n'
                        f'–î–æ—Å—Ç—É–ø–Ω–æ:\n'
                        f'‚Ä¢ –ö–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤ ‚Äî {remaining["catamarans"]}\n'
                        f'‚Ä¢ –°–∞–ø–±–æ—Ä–¥–æ–≤ ‚Äî {remaining["supboards"]}\n'
                        f'‚Ä¢ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ ‚Äî {remaining["transfers"]}\n\n'
                        f'üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú',
                        reply_markup=kb.close2,
                        parse_mode='HTML'
                    )
                    await MyFSM.add_time_start.set()

                else:
                    await message.answer(
                        '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã\n'
                        f'–°–≤–æ–±–æ–¥–Ω–æ: '
                        f'–∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤ ‚Äî {check[1]["catamarans"]}, '
                        f'–°–∞–ø–±–æ—Ä–¥–æ–≤ ‚Äî {check[1]["supboards"]}, '
                        f'—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ ‚Äî {check[1]["transfers"]}',
                        reply_markup=kb.main,
                        parse_mode='HTML'
                    )
                    await state.finish()

            except Exception as e:
                await message.answer(
                    text=f'‚ùå –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì {e}',
                    reply_markup=kb.close2
                )
            except Exception as e:
                await message.answer(
                    '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
                    reply_markup=kb.main
                )
                await state.finish()
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_date_end: {e}")

    @dp.message_handler(state=MyFSM.add_time_start)
    async def save_time_start(message: types.Message, state: FSMContext):
        if not re.match(r'^\d{2}:\d{2}$', message.text.strip()):
            await message.answer('‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 16:00', reply_markup=kb.close2)
            return
        async with state.proxy() as data:
            data['time_start'] = message.text
        await message.answer('‚è∞ –ù–∞–ø–∏—à–∏—Ç–µ "–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)', reply_markup=kb.close2)
        await MyFSM.next()

    @dp.message_handler(state=MyFSM.add_time_end)
    async def save_time_end(message: types.Message, state: FSMContext):
        if not re.match(r'^\d{2}:\d{2}$', message.text.strip()):
            await message.answer('‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 16:00', reply_markup=kb.close2)
            return

        async with state.proxy() as data:
            data['time_end'] = message.text.strip()

        await message.answer('üó∫ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:', reply_markup=get_points_a_keyboard())
        await MyFSM.add_route.set()

    @dp.callback_query_handler(lambda c: c.data.startswith('select_route_'), state=MyFSM.add_route)
    async def route_selected(callback: types.CallbackQuery, state: FSMContext):
        try:
            route_id = int(callback.data.replace('select_route_', ''))
        except:
            return
        async with state.proxy() as data:
            data['route_id'] = route_id

        await callback.message.edit_text("üë§ –ù–∞–ø–∏—à–∏ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞", reply_markup=kb.close2)
        await MyFSM.next()

    @dp.message_handler(state=MyFSM.add_customer_name)
    async def save_customer_name(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['customer_name'] = message.text
        await message.answer('üìû –ù–∞–ø–∏—à–∏ "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞"', reply_markup=kb.close2)
        await MyFSM.next()

    @dp.callback_query_handler(lambda c: c.data.startswith('select_point_a_'), state=MyFSM.add_route)
    async def handle_point_a_selected(callback: types.CallbackQuery, state: FSMContext):
        point_a = callback.data.replace('select_point_a_', '')
        async with state.proxy() as data:
            data['point_a'] = point_a

        await callback.message.edit_text(
            text=f"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É –ê: {point_a}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ë:",
            reply_markup=get_routes_keyboard_from_point_a(point_a)
        )

    @dp.callback_query_handler(lambda c: c.data.startswith('select_route_'), state=MyFSM.add_route)
    async def route_selected(callback: types.CallbackQuery, state: FSMContext):
        route_id = int(callback.data.replace('select_route_', ''))
        async with state.proxy() as data:
            data['route_id'] = route_id

        await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞:", reply_markup=kb.close2)
        await MyFSM.next()

    @dp.message_handler(state=MyFSM.add_phone_number)
    async def save_phone_number(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            try:
                phone = re.sub(r'[^0-9]', '', message.text)

                if len(phone) == 10:
                    whatsapp_link = f"https://wa.me/7{phone}"
                elif len(phone) == 11 and phone[0] in ('7', '8'):
                    whatsapp_link = f"https://wa.me/7{phone[1:]}"
                else:
                    await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ 10 –∏–ª–∏ 11 —Ü–∏—Ñ—Ä', reply_markup=kb.close2)
                    return

                data['customer_phone'] = whatsapp_link
                await message.answer('üìù –ù–∞–ø–∏—à–∏ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"', reply_markup=kb.close2)
                await MyFSM.next()

            except Exception as e:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=kb.close2)
                logger.error(f"Phone processing error: {e}")

    @dp.message_handler(state=MyFSM.add_additional_wishes)
    async def save_additional_wishes(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['additional_wishes'] = None if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else message.text

            booking_successful = await add_new_order(
                date_arrival=data['date_start'],
                date_departure=data['date_end'],
                time_arrival=data['time_start'],
                time_departure=data['time_end'],
                route_id=data['route_id'],
                customer_name=data['customer_name'],
                phone=data['customer_phone'],
                additional_wishes=data['additional_wishes'],
                prepayment_status=0
            )

            info_text = await kb.info_text(
                order_id=booking_successful,
                date_arrival=data['date_start'],
                date_departure=data['date_end'],
                time_arrival=data['time_start'],
                time_departure=data['time_end'],
                route_id=data['route_id'],
                customer_name=data['customer_name'],
                phone_link=data['customer_phone'],
                additional_wishes=data['additional_wishes'],
                status=False
            )

            if booking_successful:
                buttons = await kb.add_service_buttons(booking_successful)
                await message.answer(
                    text=f'–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. \n {info_text}',
                    reply_markup=buttons,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                try:
                    await message.bot.send_message(
                        chat_id=CHAT_ID,
                        text=f"–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {info_text}",
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                except Exception as e:
                    logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {e}')
            else:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã.', reply_markup=kb.main)

        await state.finish()
